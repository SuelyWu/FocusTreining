Criação de uma loja virtual com os requisitos:

1. Listagem de produtos

2. Adição de produtos ao carrinho de compras (produto e quantidade)

3. Visualização do carrinho de compras

4. Checkout:

  4.1. Identificação do cliente (email... precadastrado)

  4.2. Forma de pagamento

    4.2.1. Se cartão, receber o número do cartão e quantidade de parcelas

    4.2.2. Se boleto, imprimir um número randômico, para simular o código de barras

  4.3. Finalização da compra





RACIOCINIO 21022018

Uma classe Produto
    - categoria : categoria
    - id : int
	- nomeProduto: String
	- precoProduto: double
	> getId, getCategoria, getPreco
Uma classe Armazem para armazenar produtos pre cadastrados
	- armazem: Map<Categoria, List<Produto>>
	> getProdutos, getEstoqueProduto, decrementarProduto, incrementarProduto, hasProdSuficiente
Uma classe Cliente
	- nomeCliente: string
	- id: int
	- carrinhoCompra
	> getId, equals
Uma classe BancoCliente para armazenar clientes pre cadastrados
	- clientes: List<Cliente>
	> hasCliente, addCliente, gerarId
Uma classe CarrinhoCompra
	- itens: List<ItemCompra>
	> addItem, delItem, getItens, finalizarCompra !!a implementar!!
Uma classe ItemCompra para representar produto selecionado e qtd numa compra
	- produto: Categoria
	- qtd: int
	> incrementarItem, decrementarItem, getTotalItem, equals, getIdProduto
Uma classe Compra para representar uma compra finalizada
    - cliente
	- carrinhoCompra
	- pagamento
Uma classe Pagamento
    - total : double
    - qtdParcela: int
    - valorParcelas: List<Double>
    - parcPagas : List<Boolean>
	Uma classe PagCartao
		- cartao: Cartao
		> validarNumCartao, setNumCartao, setQtdParcelas
	Uma classe PagBoleto
		- listCodBarras : List<CodigoBarra>
		> gerarCodBarras
Uma classe CodigoBarra
    - 5 partes : long
Uma classe Printer para imprimir sout
	- print(List<List<Produto>>) (List<ItemCompra)





RACIOCINIO INICIAL

Uma classe Produto
	- nomeProduto: String
	- precoProduto: double
	>
Uma classe Armazem para armazenar produtos pre cadastrados
	- armazem: Map<Categoria, List<Produto>>
	> listarProdutos, decrementarProduto, incrementarProduto
Uma classe Cliente
	- nomeCliente: string
	- endereco: string
	- emailCliente: string
	- idCliente: int
	> equals
Uma classe BancoCliente para armazenar clientes pre cadastrados
	- clientes: List<Cliente> 
	> validarCliente
Uma classe CarrinhoCompra
	- itens: List<ItemCompra>
	> addItem, delItem, listarItens, checkout
Uma classe ItemCompra para representar produto selecionado e qtd numa compra
	- produto: Categoria
	- qtd: int
	- totalItem: double
Uma classe Compra para representar uma compra finalizada
	- carrinhoCompra
	- pagamento
Uma classe Pagamento
	Uma classe PagCartao
		- cartao: Cartao
		- qtdParcelas: int
		> validarNumCartao, setNumCartao, setQtdParcelas
	Uma classe PagBoleto
		- codigoBarras: int
		> gerarCodBarras
Uma classe Printer para imprimir sout 
	- print(List<List<Produto>>) (List<ItemCompra) 









