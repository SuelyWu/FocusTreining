Criação de uma loja virtual com os requisitos:

1. Listagem de produtos

2. Adição de produtos ao carrinho de compras (productType e quantidade)

3. Visualização do carrinho de compras

4. Checkout:

  4.1. Identificação do client (email... precadastrado)

  4.2. Forma de paymentOption

    4.2.1. Se cartão, receber o número do cartão e quantidade de parcelas

    4.2.2. Se boleto, imprimir um número randômico, para simular o código de barras

  4.3. Finalização da compra


RACIOCINIO 22022018
Bem vindo

#Voce quer:
	Ver lista product
	Ver carrinho

/Ver lista product
	#...
	#Voce quer:
		Add item
		Ver carrinho

	/Add item
		# digite name product
		# digite qtt desejada
		>> additem


/Ver carrinho
	#...
	#Voce quer:
		Ver lista product
		Ajustar qtt item
		Finalizar compra

	/Ajustar qtt item
		# qual item a ajustar
		# digite nova qtt
		>> ajustar

	/Finalizar compra
		# Informe seu id
		# Tipo paymentOption
			/Cartao
				# informe cardNumber
				# informe qtdParcelas
		>> finalizar compra









RACIOCINIO 21022018

Uma classe Product
    - productType : productType
    - codigo : int
	- nomeProduto: String
	- precoProduto: double
	> getId, getCategoria, getPreco
Uma classe Store para armazenar produtos pre cadastrados
	- store: Map<ProductType, List<Product>>
	> getProdutos, getEstoqueProduto, decrementarProduto, incrementarProduto, hasProdSuficiente
Uma classe Client
	- nomeCliente: string
	- codigo: int
	- shoppingCart
	> getId, equals
Uma classe ListClients para armazenar clientes pre cadastrados
	- clientes: List<Client>
	> hasCliente, addCliente, gerarId
Uma classe ShoppingCart
	- itens: List<OrderItem>
	> addItem, delItem, getItens, finalizarCompra !!a implementar!!
Uma classe OrderItem para representar productType selecionado e qtt numa compra
	- productType: ProductType
	- qtt: int
	> incrementarItem, decrementarItem, getTotalItem, equals, getIdProduto
Uma classe Order para representar uma compra finalizada
    - client
	- shoppingCart
	- paymentOption
Uma classe PaymentOption
    - total : double
    - qtdParcelas: int
    - valorParcelas: List<Double>
    - parcPagas : List<Boolean>
	Uma classe PaymentCreditCard
		- cartao: Cartao
		> validarNumCartao, setNumCartao, setQtdParcelas
	Uma classe PaymentBillet
		- listCodBarras : List<CodigoBarra>
		> gerarCodBarras
Uma classe CodigoBarra
    - 5 partes : long
Uma classe Printer para imprimir sout
	- print(List<List<Product>>) (List<OrderItem)





RACIOCINIO INICIAL

Uma classe Product
	- nomeProduto: String
	- precoProduto: double
	>
Uma classe Store para armazenar produtos pre cadastrados
	- store: Map<ProductType, List<Product>>
	> listarProdutos, decrementarProduto, incrementarProduto
Uma classe Client
	- nomeCliente: string
	- endereco: string
	- emailCliente: string
	- idCliente: int
	> equals
Uma classe ListClients para armazenar clientes pre cadastrados
	- clientes: List<Client>
	> validarCliente
Uma classe ShoppingCart
	- itens: List<OrderItem>
	> addItem, delItem, listarItens, checkout
Uma classe OrderItem para representar productType selecionado e qtt numa compra
	- productType: ProductType
	- qtt: int
	- totalItem: double
Uma classe Order para representar uma compra finalizada
	- shoppingCart
	- paymentOption
Uma classe PaymentOption
	Uma classe PaymentCreditCard
		- cartao: Cartao
		- qtdParcelas: int
		> validarNumCartao, setNumCartao, setQtdParcelas
	Uma classe PaymentBillet
		- codigoBarras: int
		> gerarCodBarras
Uma classe Printer para imprimir sout 
	- print(List<List<Product>>) (List<OrderItem)









