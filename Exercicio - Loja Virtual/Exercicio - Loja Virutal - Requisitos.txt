Criação de uma loja virtual com os requisitos:

1. Listagem de produtos

2. Adição de produtos ao carrinho de compras (produtoTipo e quantidade)

3. Visualização do carrinho de compras

4. Checkout:

  4.1. Identificação do cliente (email... precadastrado)

  4.2. Forma de pagamento

    4.2.1. Se cartão, receber o número do cartão e quantidade de parcelas

    4.2.2. Se boleto, imprimir um número randômico, para simular o código de barras

  4.3. Finalização da compra


RACIOCINIO 22022018
Bem vindo

#Voce quer:
	Ver lista produto
	Ver carrinho

/Ver lista produto
	#...
	#Voce quer:
		Add item
		Ver carrinho

	/Add item
		# digite nome produto
		# digite qtd desejada
		>> additem


/Ver carrinho
	#...
	#Voce quer:
		Ver lista produto
		Ajustar qtd item
		Finalizar compra

	/Ajustar qtd item
		# qual item a ajustar
		# digite nova qtd
		>> ajustar

	/Finalizar compra
		# Informe seu id
		# Tipo pagamento
			/Cartao
				# informe numCartao
				# informe qtdParcelas
		>> finalizar compra









RACIOCINIO 21022018

Uma classe Produto
    - produtoTipo : produtoTipo
    - codigo : int
	- nomeProduto: String
	- precoProduto: double
	> getId, getCategoria, getPreco
Uma classe Armazem para armazenar produtos pre cadastrados
	- armazem: Map<ProdutoTipo, List<Produto>>
	> getProdutos, getEstoqueProduto, decrementarProduto, incrementarProduto, hasProdSuficiente
Uma classe Cliente
	- nomeCliente: string
	- codigo: int
	- carrinhoCompra
	> getId, equals
Uma classe BancoCliente para armazenar clientes pre cadastrados
	- clientes: List<Cliente>
	> hasCliente, addCliente, gerarId
Uma classe CarrinhoCompra
	- itens: List<ItemPedido>
	> addItem, delItem, getItens, finalizarCompra !!a implementar!!
Uma classe ItemPedido para representar produtoTipo selecionado e qtd numa compra
	- produtoTipo: ProdutoTipo
	- qtd: int
	> incrementarItem, decrementarItem, getTotalItem, equals, getIdProduto
Uma classe Pedido para representar uma compra finalizada
    - cliente
	- carrinhoCompra
	- pagamento
Uma classe Pagamento
    - total : double
    - qtdParcelas: int
    - valorParcelas: List<Double>
    - parcPagas : List<Boolean>
	Uma classe PagCartao
		- cartao: Cartao
		> validarNumCartao, setNumCartao, setQtdParcelas
	Uma classe PagBoleto
		- listCodBarras : List<CodigoBarra>
		> gerarCodBarras
Uma classe CodigoBarra
    - 5 partes : long
Uma classe Printer para imprimir sout
	- print(List<List<Produto>>) (List<ItemPedido)





RACIOCINIO INICIAL

Uma classe Produto
	- nomeProduto: String
	- precoProduto: double
	>
Uma classe Armazem para armazenar produtos pre cadastrados
	- armazem: Map<ProdutoTipo, List<Produto>>
	> listarProdutos, decrementarProduto, incrementarProduto
Uma classe Cliente
	- nomeCliente: string
	- endereco: string
	- emailCliente: string
	- idCliente: int
	> equals
Uma classe BancoCliente para armazenar clientes pre cadastrados
	- clientes: List<Cliente> 
	> validarCliente
Uma classe CarrinhoCompra
	- itens: List<ItemPedido>
	> addItem, delItem, listarItens, checkout
Uma classe ItemPedido para representar produtoTipo selecionado e qtd numa compra
	- produtoTipo: ProdutoTipo
	- qtd: int
	- totalItem: double
Uma classe Pedido para representar uma compra finalizada
	- carrinhoCompra
	- pagamento
Uma classe Pagamento
	Uma classe PagCartao
		- cartao: Cartao
		- qtdParcelas: int
		> validarNumCartao, setNumCartao, setQtdParcelas
	Uma classe PagBoleto
		- codigoBarras: int
		> gerarCodBarras
Uma classe Printer para imprimir sout 
	- print(List<List<Produto>>) (List<ItemPedido)









